spring.application.name=products-microservice

# 0 port means random
server.port=7070

# We specify all the kafka brokers to enable high availability
spring.kafka.producer.bootstrap-servers=localhost:9092,localhost:9094,localhost:9096

# Serializers
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Message durability. This depends on the number of "replication factors" you specified in the topic.
# So, all, means all the replicas (not all the brokers)
# you can use 'all', 0, 1, 2, ...
# you can also specify the property min.insync.replicas=2 at topic level, so you don't wait for "all"
# 1 is the default -> ACK only from the leader
spring.kafka.producer.acks=all

# Retries on error (default is Integer.MAX number or 2 minutes)
#spring.kafka.producer.retries=10

# Duration waited between retry attempts (Default 100ms)
#spring.kafka.producer.properties.retry.backoff.ms=1000

# Documentation of Kafka suggests to only use the following instead, to control the retry mechanism
# (default 2 min)
# must be >= linger.ms (def 0 sec) + request.timeout.ms (def 30sec)
# linger.ms is useful to buffer messages before sending them and great together with data compression
spring.kafka.producer.properties.delivery.timeout.ms=35000

spring.kafka.producer.properties.linger.ms=0
spring.kafka.producer.properties.request.timeout.ms=30000

# By default, the idempotent flag is set to true. This allows the broker topic to avoid message duplications due to,
# for instance, network issues with the acks and retries.
# idempotence is automatically disabled if the following other properties are not set correctly
# acts = all -> must be all
# retries = 1+ must be greater than zero
# max.in.flight.requests.per.connection = 5 -> must be smaller or equals to 5
spring.kafka.producer.properties.enable.idempotence = true
